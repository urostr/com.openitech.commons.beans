/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openitech.sql.pool.proxool;

import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.io.InputStream;
import java.io.Reader;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author uros
 */
public class PreparedStatementProxy extends StatementProxy implements PreparedStatement {

  String sql = null;
  Integer autoGeneratedKeys = null;
  int[] columnIndexes = null;
  String[] columnNames = null;
  protected List<Invocation<Statement>> parameters = new ArrayList<Invocation<Statement>>();

  final Invocation<Statement> executeQuery;
  final Invocation<Statement> executeUpdate;

  protected PreparedStatementProxy(ConnectionProxy proxy, PreparedStatement implementation, String sql) throws SQLException {
    super(proxy, implementation);
    if (sql==null) {
      throw new NullPointerException("Prepared statement must have a query");
    }
    this.sql = sql;
    //speed up
    this.executeQuery = new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_executeQuery14), new Object[]{});
    this.executeUpdate = new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_executeUpdate19), new Object[]{});
  }

  protected PreparedStatementProxy(ConnectionProxy proxy, PreparedStatement implementation, String sql, int autoGeneratedKeys) throws SQLException {
    this(proxy, implementation, sql);
    this.autoGeneratedKeys = autoGeneratedKeys;
  }

  protected PreparedStatementProxy(ConnectionProxy proxy, PreparedStatement implementation, String sql, int[] columnIndexes) throws SQLException {
    this(proxy, implementation, sql);
    this.columnIndexes = columnIndexes;
  }

  protected PreparedStatementProxy(ConnectionProxy proxy, PreparedStatement implementation, String sql, String[] columnNames) throws SQLException {
    this(proxy, implementation, sql);
    this.columnNames = columnNames;
  }

  @Override
  protected Statement getStatement(Invocation<Statement> ignore) throws SQLException {
    boolean create = (statement == null);

    if (!create) {
      try {
        proxy.connection.getWarnings();
        statement.getWarnings();
      } catch (Throwable ex) {
        Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).info(getClass() + ":recreating statement:cause [" + ex.getMessage() + "]");
        statement = null;
        create = true;
      }
    }

    if (create) {
      synchronized (this) {
        if (statement == null) {
          if (autoGeneratedKeys != null) {
            statement = proxy.prepareStatement(sql, autoGeneratedKeys);
          } else if (columnIndexes != null) {
            statement = proxy.prepareStatement(sql, columnIndexes);
          } else if (columnNames != null) {
            statement = proxy.prepareStatement(sql, columnNames);
          } else {
            statement = proxy.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
          }
          statement = ((PreparedStatementProxy) statement).statement;
          try {
            List<Invocation<Statement>> invoke = new ArrayList(invocations.size() + parameters.size());
            invoke.addAll(invocations);
            invoke.addAll(parameters);
            Collections.sort(invoke);

            List<Invocation<Statement>> copies = new ArrayList(invoke.size());

            for (Invocation<Statement> element : invoke) {
              if (!element.equals(ignore)) {
                copies.add((Invocation<Statement>) element.clone());
              }
            }

            for (Invocation<Statement> element : copies) {
              element.invoke(statement);
            }
            for (String sql : batch) {
              statement.addBatch(sql);
            }
          } catch (InvocationTargetException ex) {
            Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).info(getClass() + ":failed to recreate statement:cause [" + ex.getMessage() + "]");
            throw (ex.getCause() instanceof SQLException) ? (SQLException) ex.getCause() : new SQLException(ex);
          }
        }
      }
    }
    return (PreparedStatement) statement;
  }
  private static final PreparedStatementProxyBeanInfo beanInfo = new PreparedStatementProxyBeanInfo();
  private static final Map<Integer, Method> methodCache = new ConcurrentHashMap<Integer, Method>();
  private static final Map<Integer, Method> writeMethodCache = new ConcurrentHashMap<Integer, Method>();
  private static final Map<Integer, Method> readMethodCache = new ConcurrentHashMap<Integer, Method>();

  private Method getMethod(int methodIndex) {
    if (methodCache.containsKey(methodIndex)) {
      return methodCache.get(methodIndex);
    } else {
      Method method = null;
      try {
        Method spm = beanInfo.getMethodDescriptors()[methodIndex].getMethod();
        method = PreparedStatement.class.getMethod(spm.getName(), spm.getParameterTypes());
        methodCache.put(methodIndex, method);
      } catch (Exception ex) {
        Logger.getLogger(StatementProxy.class.getName()).log(Level.SEVERE, null, ex);
      }
      return method;
    }
  }

  private Method getWriteMethod(int propertyIndex) {
    if (writeMethodCache.containsKey(propertyIndex)) {
      return writeMethodCache.get(propertyIndex);
    } else {
      Method method = null;
      try {
        PropertyDescriptor pd = (PropertyDescriptor) beanInfo.getPropertyDescriptors()[propertyIndex];
        Method spm = pd instanceof IndexedPropertyDescriptor ? ((IndexedPropertyDescriptor) pd).getIndexedWriteMethod() : pd.getWriteMethod();
        method = PreparedStatement.class.getMethod(spm.getName(), spm.getParameterTypes());
        writeMethodCache.put(propertyIndex, method);
      } catch (Exception ex) {
        Logger.getLogger(StatementProxy.class.getName()).log(Level.SEVERE, null, ex);
      }
      return method;
    }
  }

  private Method getReadMethod(int propertyIndex) {
    if (readMethodCache.containsKey(propertyIndex)) {
      return readMethodCache.get(propertyIndex);
    } else {
      Method method = null;
      try {
        PropertyDescriptor pd = (PropertyDescriptor) beanInfo.getPropertyDescriptors()[propertyIndex];
        Method spm = pd instanceof IndexedPropertyDescriptor ? ((IndexedPropertyDescriptor) pd).getIndexedReadMethod() : pd.getReadMethod();
        method = PreparedStatement.class.getMethod(spm.getName(), spm.getParameterTypes());
        readMethodCache.put(propertyIndex, method);
      } catch (Exception ex) {
        Logger.getLogger(StatementProxy.class.getName()).log(Level.SEVERE, null, ex);
      }
      return method;
    }
  }

  @Override
  public ResultSet executeQuery() throws SQLException {
    executeQuery.timestamp();
    invocations.add(executeQuery);
    return new ResultSetProxy((ResultSet) tryToInvoke(executeQuery), executeQuery, this);
  }

  @Override
  public int executeUpdate() throws SQLException {
    executeUpdate.timestamp();
    invocations.add(executeUpdate);
    return (Integer) tryToInvoke(executeUpdate);
  }

  @Override
  public void setNull(int parameterIndex, int sqlType) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_null), new Object[]{parameterIndex, sqlType}));
    ((PreparedStatement) getStatement()).setNull(parameterIndex, sqlType);
  }

  @Override
  public void setBoolean(int parameterIndex, boolean x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_boolean), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setBoolean(parameterIndex, x);
  }

  @Override
  public void setByte(int parameterIndex, byte x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_byte), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setByte(parameterIndex, x);
  }

  @Override
  public void setShort(int parameterIndex, short x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_short), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setShort(parameterIndex, x);
  }

  @Override
  public void setInt(int parameterIndex, int x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_int), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setInt(parameterIndex, x);
  }

  @Override
  public void setLong(int parameterIndex, long x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_long), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setLong(parameterIndex, x);
  }

  @Override
  public void setFloat(int parameterIndex, float x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_float), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setFloat(parameterIndex, x);
  }

  @Override
  public void setDouble(int parameterIndex, double x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_double), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setDouble(parameterIndex, x);
  }

  @Override
  public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_bigDecimal), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setBigDecimal(parameterIndex, x);
  }

  @Override
  public void setString(int parameterIndex, String x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_string), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setString(parameterIndex, x);
  }

  @Override
  public void setBytes(int parameterIndex, byte[] x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_bytes), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setBytes(parameterIndex, x);
  }

  @Override
  public void setDate(int parameterIndex, Date x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_date), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setDate(parameterIndex, x);
  }

  @Override
  public void setTime(int parameterIndex, Time x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_time), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setTime(parameterIndex, x);
  }

  @Override
  public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_timestamp), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setTimestamp(parameterIndex, x);
  }

  @Override
  public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setAsciiStream21), new Object[]{parameterIndex, x, length}));
    ((PreparedStatement) getStatement()).setAsciiStream(parameterIndex, x, length);
  }

  @Override
  @Deprecated
  public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setUnicodeStream40), new Object[]{parameterIndex, x, length}));
    ((PreparedStatement) getStatement()).setUnicodeStream(parameterIndex, x, length);
  }

  @Override
  public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setBinaryStream23), new Object[]{parameterIndex, x, length}));
    ((PreparedStatement) getStatement()).setBinaryStream(parameterIndex, x, length);
  }

  @Override
  public void clearParameters() throws SQLException {
    parameters.clear();
    ((PreparedStatement) getStatement()).clearParameters();
  }

  @Override
  public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setObject36), new Object[]{parameterIndex, x, targetSqlType}));
    ((PreparedStatement) getStatement()).setObject(parameterIndex, x, targetSqlType);
  }

  @Override
  public void setObject(int parameterIndex, Object x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_object), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setObject(parameterIndex, x);
  }

  @Override
  public boolean execute() throws SQLException {
    return (Boolean) tryToInvoke(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_execute11), new Object[]{}));
  }

  @Override
  public void addBatch() throws SQLException {
    ((PreparedStatement) getStatement()).addBatch();
  }

  @Override
  public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setCharacterStream27), new Object[]{parameterIndex, reader, length}));
    ((PreparedStatement) getStatement()).setCharacterStream(parameterIndex, reader, length);
  }

  @Override
  public void setRef(int parameterIndex, Ref x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_ref), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setRef(parameterIndex, x);
  }

  @Override
  public void setBlob(int parameterIndex, Blob x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_blob), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setBlob(parameterIndex, x);
  }

  @Override
  public void setClob(int parameterIndex, Clob x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_clob), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setClob(parameterIndex, x);
  }

  @Override
  public void setArray(int parameterIndex, Array x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_array), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setArray(parameterIndex, x);
  }

  @Override
  public ResultSetMetaData getMetaData() throws SQLException {
    return ((PreparedStatement) getStatement()).getMetaData();
  }

  @Override
  public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setDate31), new Object[]{parameterIndex, x, cal}));
    ((PreparedStatement) getStatement()).setDate(parameterIndex, x, cal);
  }

  @Override
  public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setTime38), new Object[]{parameterIndex, x, cal}));
    ((PreparedStatement) getStatement()).setTime(parameterIndex, x, cal);
  }

  @Override
  public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setTimestamp39), new Object[]{parameterIndex, x, cal}));
    ((PreparedStatement) getStatement()).setTime(parameterIndex, null, cal);
  }

  @Override
  public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setNull35), new Object[]{parameterIndex, sqlType, typeName}));
    ((PreparedStatement) getStatement()).setNull(parameterIndex, sqlType, typeName);
  }

  @Override
  public void setURL(int parameterIndex, URL x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_URL), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setURL(parameterIndex, x);
  }

  @Override
  public ParameterMetaData getParameterMetaData() throws SQLException {
    return ((PreparedStatement) getStatement()).getParameterMetaData();
  }

  @Override
  public void setRowId(int parameterIndex, RowId x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_rowId), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setRowId(parameterIndex, x);
  }

  @Override
  public void setNString(int parameterIndex, String value) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_NString), new Object[]{parameterIndex, value}));
    ((PreparedStatement) getStatement()).setNString(parameterIndex, value);
  }

  @Override
  public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setNCharacterStream32), new Object[]{parameterIndex, value, length}));
    ((PreparedStatement) getStatement()).setNCharacterStream(parameterIndex, value, length);
  }

  @Override
  public void setNClob(int parameterIndex, NClob value) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_NClob), new Object[]{parameterIndex, value}));
    ((PreparedStatement) getStatement()).setNClob(parameterIndex, value);
  }

  @Override
  public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setClob30), new Object[]{parameterIndex, reader, length}));
    ((PreparedStatement) getStatement()).setClob(parameterIndex, reader, length);
  }

  @Override
  public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setBlob26), new Object[]{parameterIndex, inputStream, length}));
    ((PreparedStatement) getStatement()).setBlob(parameterIndex, inputStream, length);
  }

  @Override
  public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setNClob34), new Object[]{parameterIndex, reader, length}));
    ((PreparedStatement) getStatement()).setNClob(parameterIndex, reader, length);
  }

  @Override
  public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_SQLXML), new Object[]{parameterIndex, xmlObject}));
    ((PreparedStatement) getStatement()).setSQLXML(parameterIndex, xmlObject);
  }

  @Override
  public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setObject37), new Object[]{parameterIndex, x, targetSqlType, scaleOrLength}));
    ((PreparedStatement) getStatement()).setObject(parameterIndex, x, targetSqlType, scaleOrLength);
  }

  @Override
  public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setAsciiStream22), new Object[]{parameterIndex, x, length}));
    ((PreparedStatement) getStatement()).setAsciiStream(parameterIndex, x, length);
  }

  @Override
  public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setBinaryStream24), new Object[]{parameterIndex, x, length}));
    ((PreparedStatement) getStatement()).setBinaryStream(parameterIndex, x, length);
  }

  @Override
  public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
    parameters.add(new Invocation<Statement>(getMethod(PreparedStatementProxyBeanInfo.METHOD_setCharacterStream28), new Object[]{parameterIndex, reader, length}));
    ((PreparedStatement) getStatement()).setCharacterStream(parameterIndex, reader, length);
  }

  @Override
  public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_asciiStream), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setAsciiStream(parameterIndex, x);
  }

  @Override
  public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_binaryStream), new Object[]{parameterIndex, x}));
    ((PreparedStatement) getStatement()).setBinaryStream(parameterIndex, x);
  }

  @Override
  public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_characterStream), new Object[]{parameterIndex, reader}));
    ((PreparedStatement) getStatement()).setCharacterStream(parameterIndex, reader);
  }

  @Override
  public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_NCharacterStream), new Object[]{parameterIndex, value}));
    ((PreparedStatement) getStatement()).setNCharacterStream(parameterIndex, value);
  }

  @Override
  public void setClob(int parameterIndex, Reader reader) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_clob), new Object[]{parameterIndex, reader}));
    ((PreparedStatement) getStatement()).setClob(parameterIndex, reader);
  }

  @Override
  public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_blob), new Object[]{parameterIndex, inputStream}));
    ((PreparedStatement) getStatement()).setBlob(parameterIndex, inputStream);
  }

  @Override
  public void setNClob(int parameterIndex, Reader reader) throws SQLException {
    parameters.add(new Invocation<Statement>(getWriteMethod(PreparedStatementProxyBeanInfo.PROPERTY_NClob), new Object[]{parameterIndex, reader}));
    ((PreparedStatement) getStatement()).setNClob(parameterIndex, reader);
  }
}
