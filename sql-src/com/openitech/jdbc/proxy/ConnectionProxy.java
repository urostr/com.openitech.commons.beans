/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openitech.jdbc.proxy;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import javax.sql.DataSource;

/**
 *
 * @author uros
 */
public class ConnectionProxy extends AbstractConnection {

  public ConnectionProxy(DataSource dataSource) throws SQLException {
    super(dataSource);
  }

  public ConnectionProxy(DataSource dataSource, boolean autoCommit, java.util.List<String> executeOnCreate) throws SQLException {
    super(dataSource, autoCommit, executeOnCreate);
  }

  @Override
  public PreparedStatement prepareStatement(String sql) throws SQLException {
    return new PreparedStatementProxy(this, sql);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    return new PreparedStatementProxy(this, sql, resultSetType, resultSetConcurrency);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    setHoldability(resultSetHoldability);
    return prepareStatement(sql, resultSetType, resultSetConcurrency);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
    return new PreparedStatementProxy(this, sql, autoGeneratedKeys);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
    return new PreparedStatementProxy(this, sql, columnIndexes);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
    return new PreparedStatementProxy(this, sql, columnNames);
  }

  @Override
  public CallableStatement prepareCall(String sql) throws SQLException {
    return prepareCall(sql,java.sql.ResultSet.TYPE_FORWARD_ONLY,
                           java.sql.ResultSet.CONCUR_READ_ONLY);
  }

  @Override
  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    return new CallableStatementProxy(this, sql, resultSetType, resultSetConcurrency);
  }

  @Override
  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    setHoldability(resultSetHoldability);

    return prepareCall(sql, resultSetType, resultSetConcurrency);
  }

  @Override
  public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
    return new StatementProxy(this, resultSetType, resultSetConcurrency);
  }

  private Savepoint addSavepoint(Savepoint savepoint) {
    if (savepoint!=null) {
      activeSavepoints.add(savepoint);
    }
    return savepoint;
  }

  @Override
  public Savepoint setSavepoint() throws SQLException {
    return addSavepoint(connection.setSavepoint());
  }

  @Override
  public Savepoint setSavepoint(String name) throws SQLException {
    return addSavepoint(connection.setSavepoint(name));
  }

  @Override
  public void rollback(Savepoint savepoint) throws SQLException {
    activeSavepoints.remove(savepoint);
    connection.rollback(savepoint);
  }

  @Override
  public void releaseSavepoint(Savepoint savepoint) throws SQLException {
    activeSavepoints.remove(savepoint);
    connection.releaseSavepoint(savepoint);
  }

  @Override
  public Clob createClob() throws SQLException {
    return getActiveConnection().createClob();
  }

  @Override
  public Blob createBlob() throws SQLException {
    return getActiveConnection().createBlob();
  }

  @Override
  public NClob createNClob() throws SQLException {
    return getActiveConnection().createNClob();
  }

  @Override
  public SQLXML createSQLXML() throws SQLException {
    return getActiveConnection().createSQLXML();
  }

  @Override
  public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
    return getActiveConnection().createArrayOf(typeName, elements);
  }

  @Override
  public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
    return getActiveConnection().createStruct(typeName, attributes);
  }
}
