/*
 * JPIzbiraNaslova.java
 *
 * Created on Ponedeljek, 25 avgust 2008, 14:07
 */

package com.openitech.db.components;

import com.openitech.auth.LoginContextManager;
import com.openitech.db.ConnectionManager;
import com.openitech.db.filters.DataSourceFilters;
import com.openitech.db.filters.DataSourceFilters.IntegerSeekType;
import com.openitech.db.filters.DataSourceFilters.SeekType;
import com.openitech.db.filters.FilterDocumentCaretListener;
import com.openitech.db.filters.FilterDocumentListener;
import com.openitech.db.filters.Scheduler;
import com.openitech.db.model.DbDataSource;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.security.auth.login.LoginException;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;

/**
 *
 * @author  uros
 */
public class JPIzbiraNaslova extends javax.swing.JPanel {
  DbDataModel dbDataModel = new DbDataModel();
  FilterDocumentCaretListener flPostnaStevilka;
  FilterDocumentCaretListener flPosta;
  
  DbDataSource dataSource;
  
  
  /**
   * Creates new form JPIzbiraNaslova
   */
  public JPIzbiraNaslova() throws SQLException {
    initComponents();
    
    jtfUlice.addCaretListener(new FilterDocumentCaretListener(jtfUlice.getDocument(), dbDataModel.dsUliceFilter, dbDataModel.dsUliceFilter.I_TYPE_UL_IME, 27));
    jtfUlice.getDocument().addDocumentListener(new FilterDocumentListener(dbDataModel.dsHisneStevilkeFilter, dbDataModel.dsHisneStevilkeFilter.I_TYPE_UL_IME, 108));
    jtfUlice.getDocument().addDocumentListener(new FilterDocumentListener(dbDataModel.dsPosteFilter, dbDataModel.dsPosteFilter.I_TYPE_UL_IME, 27));
    jtfUlice.getDocument().addDocumentListener(new FilterDocumentListener(dbDataModel.dsNaseljaFilter, dbDataModel.dsNaseljaFilter.I_TYPE_UL_IME, 27));
    
    jtfHisnaStevilka.getDocument().addDocumentListener(new HisnaFilterDocumentListener(dbDataModel.dsPosteFilter, 27));
    jtfHisnaStevilka.getDocument().addDocumentListener(new HisnaFilterDocumentListener(dbDataModel.dsNaseljaFilter, 27));
    
    flPostnaStevilka = new FilterDocumentCaretListener(jtfPostnaStevilka.getDocument(), dbDataModel.dsPosteFilter, dbDataModel.dsPosteFilter.I_TYPE_PT_ID, 27);
    flPosta = new FilterDocumentCaretListener(jtfPosta.getDocument(), dbDataModel.dsPosteFilter, dbDataModel.dsPosteFilter.I_TYPE_PT_IME, 27);
    
    dbDataModel.dsUlice.setReloadsOnEventQueue(false);
    dbDataModel.dsNaselja.setReloadsOnEventQueue(false);
    dbDataModel.dsHisneStevilke.setReloadsOnEventQueue(false);
    dbDataModel.dsPoste.setReloadsOnEventQueue(false);
    dbDataModel.dsPostneStevilke.setReloadsOnEventQueue(false);
  }
  
  public DbDataSource getDataSource() {
    return dataSource;
  }
  
  public void setDataSource(DbDataSource dataSource) {
    this.dataSource = dataSource;
    
    jtfUlice.setDataSource(dataSource);
    jtfHisnaStevilka.setDataSource(dataSource);
    jtfPosta.setDataSource(dataSource);
    jtfPostnaStevilka.setDataSource(dataSource);
    jtfNaselja.setDataSource(dataSource);
    
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    dsUlice = dbDataModel.dsUlice;
    cmUlice = new com.openitech.db.model.DbComboBoxModel();
    dsHisneStevilke = dbDataModel.dsHisneStevilke;
    cmHisneStevilke = new com.openitech.db.model.DbComboBoxModel();
    dsPostneStevilke = dbDataModel.dsPostneStevilke;
    cmPostneStevilke = new com.openitech.db.model.DbComboBoxModel();
    dsPoste = dbDataModel.dsPoste;
    cmPoste = new com.openitech.db.model.DbComboBoxModel();
    dsNaselja = dbDataModel.dsNaselja;
    cmNaselja = new com.openitech.db.model.DbComboBoxModel();
    jPanel1 = new javax.swing.JPanel();
    jtfUlice = new com.openitech.db.components.JDbTextField();
    jtfHisnaStevilka = new com.openitech.db.components.JDbTextField();
    jtfPostnaStevilka = new com.openitech.db.components.JDbTextField();
    jtfPosta = new com.openitech.db.components.JDbTextField();
    jtfNaselja = new com.openitech.db.components.JDbTextField();

    cmUlice.setDataSource(dsUlice);
    cmUlice.setKeyColumnName("ul_ime");
    cmUlice.setValueColumnNames(new String[] {"ul_uime"});
    cmHisneStevilke.setDataSource(dsHisneStevilke);
    cmHisneStevilke.setKeyColumnName("hs_hd");
    cmHisneStevilke.setSeparator(new String[]{""});
    cmHisneStevilke.setValueColumnNames(new String[] {"hs", "hd"});
    cmPostneStevilke.setDataSource(dsPostneStevilke);
    cmPostneStevilke.setKeyColumnName("pt_id");
    cmPostneStevilke.setValueColumnNames(new String[] {"pt_id"});
    cmPostneStevilke.addListDataListener(new javax.swing.event.ListDataListener() {
      public void contentsChanged(javax.swing.event.ListDataEvent evt) {
        cmPostneStevilkeContentsChanged(evt);
      }
      public void intervalAdded(javax.swing.event.ListDataEvent evt) {
      }
      public void intervalRemoved(javax.swing.event.ListDataEvent evt) {
      }
    });

    cmPoste.setDataSource(dsPoste);
    cmPoste.setKeyColumnName("pt_id");
    cmPoste.setValueColumnNames(new String[] {"pt_uime"});
    cmPoste.addListDataListener(new javax.swing.event.ListDataListener() {
      public void contentsChanged(javax.swing.event.ListDataEvent evt) {
        cmPosteContentsChanged(evt);
      }
      public void intervalAdded(javax.swing.event.ListDataEvent evt) {
      }
      public void intervalRemoved(javax.swing.event.ListDataEvent evt) {
      }
    });

    cmNaselja.setDataSource(dsNaselja);
    cmNaselja.setKeyColumnName("na_mid");
    cmNaselja.setValueColumnNames(new String[] {"na_uime"});
    cmNaselja.addListDataListener(new javax.swing.event.ListDataListener() {
      public void contentsChanged(javax.swing.event.ListDataEvent evt) {
        cmNaseljaContentsChanged(evt);
      }
      public void intervalAdded(javax.swing.event.ListDataEvent evt) {
      }
      public void intervalRemoved(javax.swing.event.ListDataEvent evt) {
      }
    });

    setLayout(new java.awt.GridBagLayout());

    jPanel1.setLayout(new java.awt.GridBagLayout());

    jtfUlice.setAutoCompleteModel(cmUlice);
    jtfUlice.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        jtfUliceFocusGained(evt);
      }
      public void focusLost(java.awt.event.FocusEvent evt) {
        jtfUliceFocusLost(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel1.add(jtfUlice, gridBagConstraints);

    jtfHisnaStevilka.setAutoCompleteModel(cmHisneStevilke);
    jtfHisnaStevilka.setColumns(3);
    jtfHisnaStevilka.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        jtfHisnaStevilkaFocusGained(evt);
      }
      public void focusLost(java.awt.event.FocusEvent evt) {
        jtfHisnaStevilkaFocusLost(evt);
      }
    });

    jPanel1.add(jtfHisnaStevilka, new java.awt.GridBagConstraints());

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(jPanel1, gridBagConstraints);

    jtfPostnaStevilka.setAutoCompleteModel(cmPostneStevilke);
    jtfPostnaStevilka.setColumns(6);
    jtfPostnaStevilka.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        jtfPostnaStevilkaFocusGained(evt);
      }
      public void focusLost(java.awt.event.FocusEvent evt) {
        jtfPostnaStevilkaFocusLost(evt);
      }
    });
    jtfPostnaStevilka.addCaretListener(new javax.swing.event.CaretListener() {
      public void caretUpdate(javax.swing.event.CaretEvent evt) {
        jtfPostnaStevilkaCaretUpdate(evt);
      }
    });

    add(jtfPostnaStevilka, new java.awt.GridBagConstraints());

    jtfPosta.setAutoCompleteModel(cmPoste);
    jtfPosta.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        jtfPostaFocusGained(evt);
      }
      public void focusLost(java.awt.event.FocusEvent evt) {
        jtfPostaFocusLost(evt);
      }
    });
    jtfPosta.addCaretListener(new javax.swing.event.CaretListener() {
      public void caretUpdate(javax.swing.event.CaretEvent evt) {
        jtfPostaCaretUpdate(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(jtfPosta, gridBagConstraints);

    jtfNaselja.setAutoCompleteModel(cmNaselja);
    jtfNaselja.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        jtfNaseljaFocusGained(evt);
      }
      public void focusLost(java.awt.event.FocusEvent evt) {
        jtfNaseljaFocusLost(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(jtfNaselja, gridBagConstraints);

  }// </editor-fold>//GEN-END:initComponents
  
  private void cmNaseljaContentsChanged(javax.swing.event.ListDataEvent evt) {//GEN-FIRST:event_cmNaseljaContentsChanged
    if (!jtfNaselja.isFocusOwner()&&cmNaselja.getSize()==1) {
      jtfNaselja.setText(cmNaselja.getElementAt(0).toString());
    }
  }//GEN-LAST:event_cmNaseljaContentsChanged
  
  private void jtfNaseljaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfNaseljaFocusLost
    dbDataModel.dsNaselja.setReloadsOnEventQueue(false);
  }//GEN-LAST:event_jtfNaseljaFocusLost
  
  private void jtfNaseljaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfNaseljaFocusGained
    dbDataModel.dsNaselja.setReloadsOnEventQueue(true);
  }//GEN-LAST:event_jtfNaseljaFocusGained
  
  private void jtfUliceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfUliceFocusLost
    dbDataModel.dsUlice.setReloadsOnEventQueue(false);
  }//GEN-LAST:event_jtfUliceFocusLost
  
  private void jtfUliceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfUliceFocusGained
    dbDataModel.dsUlice.setReloadsOnEventQueue(true);
  }//GEN-LAST:event_jtfUliceFocusGained
  
  private void jtfHisnaStevilkaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfHisnaStevilkaFocusLost
    dbDataModel.dsHisneStevilke.setReloadsOnEventQueue(false);
  }//GEN-LAST:event_jtfHisnaStevilkaFocusLost
  
  private void jtfHisnaStevilkaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfHisnaStevilkaFocusGained
    dbDataModel.dsHisneStevilke.setReloadsOnEventQueue(true);
  }//GEN-LAST:event_jtfHisnaStevilkaFocusGained
  
  private void jtfPostaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPostaFocusLost
    dbDataModel.dsPoste.setReloadsOnEventQueue(false);
    dbDataModel.dsPosteFilter.setSeekValue(dbDataModel.dsPosteFilter.I_TYPE_PT_IME, null);
  }//GEN-LAST:event_jtfPostaFocusLost
  
  private void jtfPostaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPostaFocusGained
    dbDataModel.dsPoste.setReloadsOnEventQueue(true);
  }//GEN-LAST:event_jtfPostaFocusGained
  
  private void jtfPostaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jtfPostaCaretUpdate
    if (jtfPosta.isFocusOwner()) {
      flPosta.caretUpdate(evt);
    } else {
      dbDataModel.dsPosteFilter.setSeekValue(dbDataModel.dsPosteFilter.I_TYPE_PT_IME, null);
    }
  }//GEN-LAST:event_jtfPostaCaretUpdate
  
  private void jtfPostnaStevilkaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jtfPostnaStevilkaCaretUpdate
    if (jtfPostnaStevilka.isFocusOwner()) {
      flPostnaStevilka.caretUpdate(evt);
    } else {
      dbDataModel.dsPosteFilter.setSeekValue(dbDataModel.dsPosteFilter.I_TYPE_PT_ID, null);
    }
  }//GEN-LAST:event_jtfPostnaStevilkaCaretUpdate
  
  private void jtfPostnaStevilkaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPostnaStevilkaFocusGained
    dbDataModel.dsPostneStevilke.setReloadsOnEventQueue(true);
  }//GEN-LAST:event_jtfPostnaStevilkaFocusGained
  
  private void jtfPostnaStevilkaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPostnaStevilkaFocusLost
    dbDataModel.dsPostneStevilke.setReloadsOnEventQueue(false);
    dbDataModel.dsPosteFilter.setSeekValue(dbDataModel.dsPosteFilter.I_TYPE_PT_ID, null);
  }//GEN-LAST:event_jtfPostnaStevilkaFocusLost
  
  private void cmPosteContentsChanged(javax.swing.event.ListDataEvent evt) {//GEN-FIRST:event_cmPosteContentsChanged
    if (!jtfPosta.isFocusOwner()&&cmPoste.getSize()==1) {
      jtfPosta.setText(cmPoste.getElementAt(0).toString());
    }
  }//GEN-LAST:event_cmPosteContentsChanged
  
  private void cmPostneStevilkeContentsChanged(javax.swing.event.ListDataEvent evt) {//GEN-FIRST:event_cmPostneStevilkeContentsChanged
    if (!jtfPostnaStevilka.isFocusOwner()&&cmPostneStevilke.getSize()==1) {
      jtfPostnaStevilka.setText(cmPostneStevilke.getElementAt(0).toString());
    }
  }//GEN-LAST:event_cmPostneStevilkeContentsChanged
  
  
  
  
  
  private void initDbModel() {
  }
  
  private static class HisnaFilterDocumentListener extends FilterDocumentListener {
    final static Pattern pattern = Pattern.compile("(^(\\d*)(\\s*)(.*)$)");
    
    public HisnaFilterDocumentListener(DbDataModel.DsFilterRPE filter) {
      super(filter, null, Scheduler.DELAY);
    }
    
    public HisnaFilterDocumentListener(DbDataModel.DsFilterRPE filter, long delay) {
      super(filter, null, delay);
    }
    
    protected void setSeekValue(final DocumentEvent e) {
      String text = getText(e);
      Integer hs = null;
      String  hd = null;
      
      if ((text != null)&&(text.length()>0)) {
        text = text.trim();
        Matcher matcher = pattern.matcher(text);
        
        if (matcher.find()) {
          if (matcher.group(2)!=null&&matcher.group(2).length()>0) {
            hs = Integer.parseInt(matcher.group(2));
          }
          if (matcher.group(4)!=null&&matcher.group(4).length()>0) {
            hd = matcher.group(4);
          }
        }
      }
      
      schedule(new SeekValueUpdateRunnable<Integer>(filter, ((DbDataModel.DsFilterRPE) filter).I_TYPE_HS, hs));
      schedule(new SeekValueUpdateRunnable<String>(filter, ((DbDataModel.DsFilterRPE) filter).I_TYPE_HD, hd));
    }
  }
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private com.openitech.db.model.DbComboBoxModel cmHisneStevilke;
  private com.openitech.db.model.DbComboBoxModel cmNaselja;
  private com.openitech.db.model.DbComboBoxModel cmPoste;
  private com.openitech.db.model.DbComboBoxModel cmPostneStevilke;
  private com.openitech.db.model.DbComboBoxModel cmUlice;
  private com.openitech.db.model.DbDataSource dsHisneStevilke;
  private com.openitech.db.model.DbDataSource dsNaselja;
  private com.openitech.db.model.DbDataSource dsPoste;
  private com.openitech.db.model.DbDataSource dsPostneStevilke;
  private com.openitech.db.model.DbDataSource dsUlice;
  private javax.swing.JPanel jPanel1;
  private com.openitech.db.components.JDbTextField jtfHisnaStevilka;
  private com.openitech.db.components.JDbTextField jtfNaselja;
  private com.openitech.db.components.JDbTextField jtfPosta;
  private com.openitech.db.components.JDbTextField jtfPostnaStevilka;
  private com.openitech.db.components.JDbTextField jtfUlice;
  // End of variables declaration//GEN-END:variables
  
  
  private static class DbDataModel {
    public final DbDataSource dsUlice = new DbDataSource();
    public final DsFilterRPE  dsUliceFilter = new DsFilterRPE("<%filter_ulice%>");
    
    public final DbDataSource dsHisneStevilke = new DbDataSource();
    public final DsFilterRPE  dsHisneStevilkeFilter = new DsFilterRPE("<%filter_hs%>");
    
    public final DbDataSource dsPoste = new DbDataSource();
    public final DbDataSource dsPostneStevilke = new DbDataSource();
    public final DsFilterRPE  dsPosteFilter = new DsFilterRPE("<%filter_pt%>");
    
    public final DbDataSource dsNaselja = new DbDataSource();
    public final DsFilterRPE  dsNaseljaFilter = new DsFilterRPE("<%filter_na%>");
    
    
    private static String getDialect() {
      String dialect = "";
      try {
        String url = ConnectionManager.getInstance().getProperty("db.jdbc.net").toLowerCase();
        if (url.startsWith("jdbc:jtds:sqlserver:")) {
          dialect = "mssql/";
        }
      } catch (NullPointerException ex) {
        //ignore
      }
      return dialect;
    }
    
    private DbDataModel() throws SQLException {
      String dialect = getDialect();
      
      try {
        dsUliceFilter.setFilterRequired(true);
        dsUliceFilter.addRequired(dsUliceFilter.I_TYPE_UL_IME);
        dsUliceFilter.addRequired(dsUliceFilter.I_TYPE_NA_IME);
        dsUliceFilter.addRequired(dsUliceFilter.I_TYPE_PT_IME, 2);
        dsUliceFilter.addRequired(dsUliceFilter.I_TYPE_PT_ID, 2);
        dsUliceFilter.setOperator("and");
        
        dsUlice.setCanAddRows(false);
        dsUlice.setCanDeleteRows(false);
        dsUlice.setReadOnly(true);
        dsUlice.setName("ulice");
        
        java.util.List parameters = new java.util.ArrayList();
        parameters.add(dsUliceFilter);
        parameters.add(dsUliceFilter);
        
        dsUlice.setParameters(parameters);
        dsUlice.setCountSql(com.openitech.util.ReadInputStream.getResourceAsString(getClass(), "sql/"+dialect+"sifrant_ulic_c.sql", "cp1250"));
        dsUlice.setSelectSql(com.openitech.util.ReadInputStream.getResourceAsString(getClass(), "sql/"+dialect+"sifrant_ulic.sql", "cp1250"));
        dsUlice.setFetchSize(108);
//        dsUlice.setQueuedDelay(108);
        
        dsUliceFilter.addDataSource(dsUlice);
        
        dsHisneStevilkeFilter.setFilterRequired(true);
        dsHisneStevilkeFilter.addRequired(dsHisneStevilkeFilter.I_TYPE_UL_IME);
        dsHisneStevilkeFilter.addRequired(dsHisneStevilkeFilter.I_TYPE_NA_IME);
        dsHisneStevilkeFilter.addRequired(dsHisneStevilkeFilter.I_TYPE_PT_IME, 2);
        dsHisneStevilkeFilter.addRequired(dsHisneStevilkeFilter.I_TYPE_PT_ID, 2);
        dsHisneStevilkeFilter.setOperator("and");
        
        dsHisneStevilke.setCanAddRows(false);
        dsHisneStevilke.setCanDeleteRows(false);
        dsHisneStevilke.setReadOnly(true);
        dsHisneStevilke.setName("hisne_stevilke");
        
        parameters = new java.util.ArrayList();
        parameters.add(dsHisneStevilkeFilter);
        parameters.add(dsHisneStevilkeFilter);
        
        dsHisneStevilke.setParameters(parameters);
        dsHisneStevilke.setCountSql(com.openitech.util.ReadInputStream.getResourceAsString(getClass(), "sql/"+dialect+"sifrant_hs_c.sql", "cp1250"));
        dsHisneStevilke.setSelectSql(com.openitech.util.ReadInputStream.getResourceAsString(getClass(), "sql/"+dialect+"sifrant_hs.sql", "cp1250"));
        dsHisneStevilke.setFetchSize(108);
//        dsHisneStevilke.setQueuedDelay(27);
        
        dsHisneStevilkeFilter.addDataSource(dsHisneStevilke);
        
        dsPosteFilter.setFilterRequired(true);
        dsPosteFilter.addRequired(dsPosteFilter.I_TYPE_UL_IME);
        dsPosteFilter.addRequired(dsPosteFilter.I_TYPE_NA_IME);
        dsPosteFilter.addRequired(dsPosteFilter.I_TYPE_PT_IME);
        dsPosteFilter.addRequired(dsPosteFilter.I_TYPE_PT_ID);
        dsPosteFilter.setOperator("and");
        
        dsPoste.setCanAddRows(false);
        dsPoste.setCanDeleteRows(false);
        dsPoste.setReadOnly(true);
        dsPoste.setName("poste");
        
        parameters = new java.util.ArrayList();
        parameters.add(dsPosteFilter);
        parameters.add(dsPosteFilter);
        
        dsPoste.setParameters(parameters);
        dsPoste.setCountSql(com.openitech.util.ReadInputStream.getResourceAsString(getClass(), "sql/"+dialect+"sifrant_pt_c.sql", "cp1250"));
        dsPoste.setSelectSql(com.openitech.util.ReadInputStream.getResourceAsString(getClass(), "sql/"+dialect+"sifrant_pt.sql", "cp1250")+"ORDER BY pt_ime");
        dsPoste.setFetchSize(108);
//        dsPoste.setQueuedDelay(54);
        
        dsPostneStevilke.setCanAddRows(false);
        dsPostneStevilke.setCanDeleteRows(false);
        dsPostneStevilke.setReadOnly(true);
        dsPostneStevilke.setName("postne_stevilke");
        
        parameters = new java.util.ArrayList();
        parameters.add(dsPosteFilter);
        parameters.add(dsPosteFilter);
        
        dsPostneStevilke.setParameters(parameters);
        dsPostneStevilke.setCountSql(com.openitech.util.ReadInputStream.getResourceAsString(getClass(), "sql/"+dialect+"sifrant_pt_c.sql", "cp1250"));
        dsPostneStevilke.setSelectSql(com.openitech.util.ReadInputStream.getResourceAsString(getClass(), "sql/"+dialect+"sifrant_pt.sql", "cp1250")+"ORDER BY pt_id");
        dsPostneStevilke.setFetchSize(108);
//        dsPostneStevilke.setQueuedDelay(54);
        
        dsPosteFilter.addDataSource(dsPoste);
        dsPosteFilter.addDataSource(dsPostneStevilke);
        
        dsNaseljaFilter.setFilterRequired(true);
        dsNaseljaFilter.addRequired(dsNaseljaFilter.I_TYPE_UL_IME);
        dsNaseljaFilter.setOperator("and");
        
        dsNaselja.setCanAddRows(false);
        dsNaselja.setCanDeleteRows(false);
        dsNaselja.setReadOnly(true);
        dsNaselja.setName("naselja");
        
        parameters = new java.util.ArrayList();
        parameters.add(dsNaseljaFilter);
        parameters.add(dsNaseljaFilter);
        
        dsNaselja.setParameters(parameters);
        dsNaselja.setCountSql(com.openitech.util.ReadInputStream.getResourceAsString(getClass(), "sql/"+dialect+"sifrant_ns_c.sql", "cp1250"));
        dsNaselja.setSelectSql(com.openitech.util.ReadInputStream.getResourceAsString(getClass(), "sql/"+dialect+"sifrant_ns.sql", "cp1250")+"ORDER BY na_ime");
        dsNaselja.setFetchSize(108);
        dsNaselja.setQueuedDelay(54);
        
        dsNaseljaFilter.addDataSource(dsNaselja);
      } catch (NullPointerException ex) {
        if (dialect.length()>0) {
          throw (IllegalStateException) (new IllegalStateException("Napaka pri inicializaciji podatkovnega modela").initCause(ex));
        }
      }
    }
    
    
    private static class DsFilterRPE  extends DataSourceFilters {
      public final SeekType I_TYPE_UL_IME = new SeekType("ul_ime",8,2);
      public final SeekType I_TYPE_NA_IME = new SeekType("na_ime",8,1);
      public final SeekType I_TYPE_PT_IME = new SeekType("pt_ime",8,1);
      public final SeekType I_TYPE_PT_ID  = DbDataModel.getDialect().length()==0?new SeekType("CAST(pt_id as varchar) like (?+'%')",7,1):new SeekType(com.openitech.util.ReadInputStream.getResourceAsString(getClass(), "sql/"+DbDataModel.getDialect()+"fragment_filter_pt_id.sql", "cp1250"),7,1);
      public final IntegerSeekType I_TYPE_HS = new IntegerSeekType("hs",4);
      public final SeekType I_TYPE_HD = new SeekType("hd",4,1);
      
      public DsFilterRPE(String replace) {
        super(replace);
      }
    }
    
  }
  
  /**
   * Holds value of property cnUlica.
   */
  private String cnUlica;
  
  /**
   * Getter for property cnUlica.
   * @return Value of property cnUlica.
   */
  public String getCnUlica() {
    return this.cnUlica;
  }
  
  /**
   * Setter for property cnUlica.
   * @param cnUlica New value of property cnUlica.
   */
  public void setCnUlica(String cnUlica) {
    this.cnUlica = cnUlica;
    jtfUlice.setColumnName(cnUlica);
  }
  
  /**
   * Holds value of property cnHisnaStevilka.
   */
  private String cnHisnaStevilka;
  
  /**
   * Getter for property cnHisnaStevilka.
   * @return Value of property cnHisnaStevilka.
   */
  public String getCnHisnaStevilka() {
    return this.cnHisnaStevilka;
  }
  
  /**
   * Setter for property cnHisnaStevilka.
   * @param cnHisnaStevilka New value of property cnHisnaStevilka.
   */
  public void setCnHisnaStevilka(String cnHisnaStevilka) {
    this.cnHisnaStevilka = cnHisnaStevilka;
    jtfHisnaStevilka.setColumnName(cnHisnaStevilka);
  }
  
  /**
   * Holds value of property cnPostnaStevilka.
   */
  private String cnPostnaStevilka;
  
  /**
   * Getter for property cnPostnaStevilka.
   * @return Value of property cnPostnaStevilka.
   */
  public String getCnPostnaStevilka() {
    return this.cnPostnaStevilka;
  }
  
  /**
   * Setter for property cnPostnaStevilka.
   * @param cnPostnaStevilka New value of property cnPostnaStevilka.
   */
  public void setCnPostnaStevilka(String cnPostnaStevilka) {
    this.cnPostnaStevilka = cnPostnaStevilka;
    jtfPostnaStevilka.setColumnName(cnPostnaStevilka);
  }
  
  /**
   * Holds value of property cnPosta.
   */
  private String cnPosta;
  
  /**
   * Getter for property cnPosta.
   * @return Value of property cnPosta.
   */
  public String getCnPosta() {
    return this.cnPosta;
  }
  
  /**
   * Setter for property cnPosta.
   * @param cnPosta New value of property cnPosta.
   */
  public void setCnPosta(String cnPosta) {
    this.cnPosta = cnPosta;
    jtfPosta.setColumnName(cnPosta);
  }
  
  /**
   * Holds value of property cnNaselje.
   */
  private String cnNaselje;
  
  /**
   * Getter for property cnNaselje.
   * @return Value of property cnNaselje.
   */
  public String getCnNaselje() {
    return this.cnNaselje;
  }
  
  /**
   * Setter for property cnNaselje.
   * @param cnNaselje New value of property cnNaselje.
   */
  public void setCnNaselje(String cnNaselje) {
    this.cnNaselje = cnNaselje;
    jtfNaselja.setColumnName(cnNaselje);
  }
}
