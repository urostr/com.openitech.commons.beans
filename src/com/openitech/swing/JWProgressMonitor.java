/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * JWProgressMonitor.java
 *
 * Created on Nedelja, 11 junij 2006, 11:57
 */
package com.openitech.swing;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.EventQueue;
import java.awt.event.ActionListener;

/**
 *
 * @author  uros
 */
public class JWProgressMonitor extends javax.swing.JDialog {

  Component owner;
  private boolean addCancelButton = false;

  /** Creates new form JWProgressMonitor */
  public JWProgressMonitor(java.awt.Frame owner) {
    super(owner, true);
    this.owner = owner;
    init();
  }

  public JWProgressMonitor(java.awt.Dialog owner) {
    super(owner, true);
    this.owner = owner;
    init();
  }

  public JWProgressMonitor(java.awt.Window owner, boolean addCancelButton) {
    super(owner);
    setModal(true);
    this.owner = owner;
    this.addCancelButton = addCancelButton;
    init();
  }

  private void init() {
    setUndecorated(true);
    initComponents();
    setLocationRelativeTo(owner);
    if (addCancelButton) {
      setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }
  }

  public void addCancelActionListener(ActionListener l) {
    jbPreklici.addActionListener(l);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jlTitle = new javax.swing.JLabel();
        jlPage = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jProgressBar = new javax.swing.JProgressBar();
        jbPreklici = new com.openitech.swing.JMnemonicButton();

        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jlTitle.setText("Stran");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel1.add(jlTitle, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        jPanel1.add(jlPage, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 0);
        jPanel2.add(jProgressBar, gridBagConstraints);

        if(addCancelButton){
            jbPreklici.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openitech/icons/small_cancel.png"))); // NOI18N
            jbPreklici.setToolTipText("Preklièi");
            jbPreklici.setBorderPainted(false);
            jbPreklici.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jbPreklici.setIconTextGap(0);
            jbPreklici.setMargin(new java.awt.Insets(0, 0, 0, 0));
            jbPreklici.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openitech/icons/small_cancel_red.png"))); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
            jPanel2.add(jbPreklici, gridBagConstraints);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
  int progress = 0;

  public void setMin(int min) {
    jProgressBar.setMinimum(min);
  }

  public int getMin() {
    return jProgressBar.getMinimum();
  }

  public void setMax(int max) {
    if (max == 0) {
      jlPage.setText("");
    }
    jProgressBar.setMaximum(max);
  }

  public int getMax() {
    return jProgressBar.getMaximum();
  }

  public int getProgress() {
    return jProgressBar.getValue();
  }

  public void setProgress(int progress) {
    this.progress = progress;
    jlPage.setText(jProgressBar.getMaximum() < 1 ? "" : Integer.toString(progress) + "/" + Integer.toString(jProgressBar.getMaximum()));
    jProgressBar.setValue(progress);
    this.repaint();
  }

  public void next() {
    progress++;
    if ((progress % jProgressBar.getMaximum()) == 0) {
      progress = 0;
    }
    setProgress(progress);
    if ((progress % 100) == 0) {
      pack();
    }
  }

  @Override
  public void setTitle(String title) {
    jlTitle.setText(title);
    pack();
  }

  @Override
  public String getTitle() {
    return jlTitle.getText();
  }

  @Override
  public void setVisible(final boolean b) {

    EventQueue.invokeLater(new Runnable() {

      @Override
      public void run() {
        try {
          setModal(b);
          inheritedVisible(b);
        } catch (Exception ex) {
          ex.printStackTrace();
        }
      }
    });
  }

  private void inheritedVisible(boolean b) {
    super.setVisible(b);
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar;
    private com.openitech.swing.JMnemonicButton jbPreklici;
    private javax.swing.JLabel jlPage;
    private javax.swing.JLabel jlTitle;
    // End of variables declaration//GEN-END:variables
}
